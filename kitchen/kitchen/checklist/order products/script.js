// ======================
// –ü–µ—Ä–µ—Ö–æ–¥—ã –ø–æ –∫–Ω–æ–ø–∫–∞–º
// ======================

// –ù–∞ –≥–ª–∞–≤–Ω—É—é
function goHome() {
    location.href = "http://stasssercheff.github.io/shbb/";
}

// –ù–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ (–æ–¥–Ω—É –ø–∞–ø–∫—É –≤–≤–µ—Ä—Ö)
function goBack() {
    const currentPath = window.location.pathname;
    const parentPath = currentPath.substring(0, currentPath.lastIndexOf("/"));
    const upperPath = parentPath.substring(0, parentPath.lastIndexOf("/"));
    window.location.href = upperPath + "/index.html";
}

// === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ===
function saveFormData() {
  const data = {};
  document.querySelectorAll('select').forEach(select => {
    data[select.name || select.id] = select.value;
  });
  document.querySelectorAll('textarea.comment').forEach(textarea => {
    data[textarea.name || textarea.id] = textarea.value;
  });
  localStorage.setItem('formData', JSON.stringify(data));
}

function restoreFormData() {
  const saved = localStorage.getItem('formData');
  if (!saved) return;
  const data = JSON.parse(saved);
  document.querySelectorAll('select').forEach(select => {
    if (data[select.name || select.id] !== undefined) {
      select.value = data[select.name || select.id];
    }
  });
  document.querySelectorAll('textarea.comment').forEach(textarea => {
    if (data[textarea.name || textarea.id] !== undefined) {
      textarea.value = data[textarea.name || textarea.id];
    }
  });
}

// === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è ===
function buildMessage(lang, formattedDate) {
  let message = `${translations['order']?.[lang] || (lang === 'en' ? 'ORDER' : '–ó–ê–ö–ê–ó')}\n\n`;
  message += `${translations['date']?.[lang] || (lang === 'en' ? 'Date' : '–î–∞—Ç–∞')}: ${formattedDate}\n`;

  // –ò–º—è –ø–æ–≤–∞—Ä–∞
  const nameSelect = document.querySelector('#employeeSelect');
  const selectedChef = nameSelect?.options[nameSelect.selectedIndex];
  const nameKey = selectedChef?.dataset.i18n;
  const name = nameKey ? translations[nameKey]?.[lang] : '-';
  message += `${translations['name']?.[lang] || (lang === 'en' ? 'Name' : '–ò–º—è')}: ${name || '-'}\n\n`;

  // –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö menu-section (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π, –≥–¥–µ –∏–º—è)
  document.querySelectorAll('.menu-section').forEach((section, index) => {
    if (index === 0) return; // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫ —Å –∏–º–µ–Ω–µ–º

    const sectionTitle = section.querySelector('.section-title');
    const titleKey = sectionTitle?.dataset.i18n;
    const title = titleKey ? translations[titleKey]?.[lang] : sectionTitle?.textContent || '';

    let sectionContent = '';
    let counter = 1;

    section.querySelectorAll('.dish').forEach(dish => {
      const select = dish.querySelector('select.qty');
      if (!select || !select.value) return;

      const label = dish.querySelector('label');
      const labelKey = label?.dataset.i18n;
      const labelText = labelKey ? translations[labelKey]?.[lang] : label?.textContent || '-';

      const selectedOption = select.options[select.selectedIndex];
      const valueKey = selectedOption?.dataset.i18n;
      const value = valueKey ? translations[valueKey]?.[lang] : selectedOption?.textContent || '-';

      sectionContent += `${counter}. ${labelText}: ${value}\n`;
      counter++;
    });

    const commentField = section.querySelector('textarea.comment');
    if (commentField && commentField.value.trim()) {
      sectionContent += `${translations['comment']?.[lang] || (lang === 'en' ? 'Comment' : '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')}: ${commentField.value.trim()}\n`;
    }

    if (sectionContent.trim()) {
      message += `${title}\n${sectionContent}\n`;
    }
  });

  return message.trim();
}

// === –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ===
const button = document.getElementById('sendToTelegram');
button.addEventListener('click', async () => {
  const chat_id = '-1002393080811';
  const worker_url = 'https://shbb1.stassser.workers.dev/';
  const accessKey = "14d92358-9b7a-4e16-b2a7-35e9ed71de43";

  // ‚úÖ –ë–µ—Ä—ë–º –º–∞—Å—Å–∏–≤ —è–∑—ã–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ sendConfig.js –ø–æ –ø—Ä–æ—Ñ–∏–ª—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const sendLangs = getSendLanguages(getCurrentProfile());
  console.log("üåç –ü—Ä–æ—Ñ–∏–ª—å:", getCurrentProfile(), "–Ø–∑—ã–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏:", sendLangs);

  const sendMessage = (msg) => fetch(worker_url, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ chat_id, text: msg })
  });

  const sendEmail = (msg) => fetch("https://api.web3forms.com/submit", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      access_key: accessKey,
      subject: "–ó–ê–ö–ê–ó",
      from_name: "SHBB KITCHEN",
      reply_to: "no-reply@shbb.com",
      message: msg
    })
  });

  const sendAllParts = async (text) => {
    let start = 0;
    while (start < text.length) {
      const chunk = text.slice(start, start + 4000);
      await sendMessage(chunk);
      await sendEmail(chunk);
      start += 4000;
    }
  };

  try {
    const today = new Date();
    const formattedDate = `${String(today.getDate()).padStart(2, '0')}/${String(today.getMonth() + 1).padStart(2, '0')}`;

    // ‚úÖ –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
    for (const lang of sendLangs) {
      const message = buildMessage(lang, formattedDate);
      await sendAllParts(message);
    }

    alert(`‚úÖ –û–¢–ü–†–ê–í–õ–ï–ù–û –Ω–∞: ${sendLangs.join(", ").toUpperCase()}`);
    localStorage.clear();
    document.querySelectorAll('select').forEach(select => select.value = '');
    document.querySelectorAll('textarea.comment').forEach(textarea => textarea.value = '');
  } catch (err) {
    alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: ' + err.message);
    console.error(err);
  }
});

// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener("DOMContentLoaded", restoreFormData);
