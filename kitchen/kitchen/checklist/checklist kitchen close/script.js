// script-fixed.js ‚Äî resilient Kitchen Close / Order script
// *** –í–ê–ñ–ù–û: —ç—Ç–æ—Ç —Ñ–∞–π–ª –ù–ï –æ–±—ä—è–≤–ª—è–µ—Ç `let translations` –≥–ª–æ–±–∞–ª—å–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å lang.js ***

// === –ù–∞–≤–∏–≥–∞—Ü–∏—è ===
window.goHome = function () {
  window.location.href = "https://stasssercheff.github.io/shbb/";
};

window.goBack = function () {
  // –ø—Ä–æ—Å—Ç–∞—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞–∑–∞–¥
  window.location.href = "../index.html";
};

// === –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–µ—Ä–µ–≤–æ–¥–∞–º (–Ω–µ —Å–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é translations) ===
const _getTranslations = () => window.translations || {};

async function _ensureTranslationsLoaded() {
  // –µ—Å–ª–∏ lang.js —É–∂–µ –ø–æ–ª–æ–∂–∏–ª —Å–ª–æ–≤–∞—Ä—å –≤ window.translations ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º
  if (window.translations && Object.keys(window.translations).length) return;

  const candidates = [
    '/shbb/lang.json', // –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞ ‚Äî —Å–∞–º—ã–π –Ω–∞–¥—ë–∂–Ω—ã–π
    'lang.json',
    './lang.json',
    '../lang.json',
    '../../lang.json',
    '../../../lang.json',
    '../../../../lang.json'
  ];

  for (const p of candidates) {
    try {
      const resp = await fetch(p);
      if (!resp.ok) continue;
      const json = await resp.json();
      if (json && Object.keys(json).length) {
        // –∫–ª–∞–¥—ë–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ —Å–∫—Ä–∏–ø—Ç—ã –º–æ–≥–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
        window.translations = json;
        return;
      }
    } catch (e) {
      // silent ‚Äî –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—É—Ç—å
    }
  }

  // –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º window.translations –∫–∞–∫ –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
  window.translations = window.translations || {};
}

// === –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ ===
function switchLanguage(lang) {
  document.documentElement.lang = lang;
  localStorage.setItem('lang', lang);
  const translations = _getTranslations();

  document.querySelectorAll('[data-i18n]').forEach(el => {
    const key = el.dataset.i18n;
    if (key && translations[key] && translations[key][lang]) {
      if ((el.tagName === 'INPUT' || el.tagName === 'TEXTAREA') && el.hasAttribute('placeholder')) {
        el.setAttribute('placeholder', translations[key][lang]);
      } else {
        el.textContent = translations[key][lang];
      }
    }
  });

  // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ select
  document.querySelectorAll('select').forEach(select => {
    Array.from(select.options).forEach(option => {
      const key = option.dataset.i18n;
      if (key && translations[key] && translations[key][lang]) {
        option.textContent = translations[key][lang];
      }
      if (option.value === '') option.textContent = '‚Äî';
    });
  });
}

// === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã ===
function saveFormData() {
  const data = {};
  document.querySelectorAll('select').forEach(select => {
    data[select.name || select.id] = select.value;
  });
  document.querySelectorAll('textarea.comment').forEach(textarea => {
    data[textarea.name || textarea.id] = textarea.value;
  });
  localStorage.setItem('formData', JSON.stringify(data));
}

function restoreFormData() {
  const saved = localStorage.getItem('formData');
  if (!saved) return;
  try {
    const data = JSON.parse(saved);
    document.querySelectorAll('select').forEach(select => {
      const key = select.name || select.id;
      if (data[key] !== undefined) select.value = data[key];
    });
    document.querySelectorAll('textarea.comment').forEach(textarea => {
      const key = textarea.name || textarea.id;
      if (data[key] !== undefined) textarea.value = data[key];
    });
  } catch (e) {
    console.warn('restoreFormData: JSON parse error', e);
  }
}

// === –ü–æ–º–æ—â–Ω–∏–∫: —Å—á–∏—Ç–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ select –∫–∞–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø—É—Å—Ç–æ–µ –∏ –Ω–µ "-" ===
function selectHasValue(select) {
  if (!select) return false;
  const val = select.value;
  return val !== '' && val !== '-' && val !== null && typeof val !== 'undefined';
}

// === DOMContentLoaded ===
document.addEventListener('DOMContentLoaded', async () => {
  // —Å–Ω–∞—á–∞–ª–∞ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤ ‚Äî –Ω–æ –Ω–µ –ø–∞–¥–∞–µ–º –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
  await _ensureTranslationsLoaded();

  const lang = localStorage.getItem('lang') || 'ru';

  // –ü—É—Å—Ç–∞—è –æ–ø—Ü–∏—è select.qty (–µ—Å–ª–∏ —É select –Ω–µ—Ç –æ–ø—Ü–∏–∏ —Å value === "")
  document.querySelectorAll('select.qty').forEach(select => {
    const hasEmpty = Array.from(select.options).some(opt => opt.value === '');
    if (!hasEmpty) {
      const emptyOption = document.createElement('option');
      emptyOption.value = '';
      emptyOption.dataset.i18n = 'empty';
      emptyOption.textContent = '‚Äî';
      emptyOption.selected = true;
      select.insertBefore(emptyOption, select.firstChild);
    }
  });

  restoreFormData();
  switchLanguage(lang);

  // –î–∞—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç DD/MM)
  const today = new Date();
  const day = String(today.getDate()).padStart(2, '0');
  const month = String(today.getMonth() + 1).padStart(2, '0');
  const formattedDate = `${day}/${month}`;
  const dateDiv = document.getElementById('current-date');
  if (dateDiv) dateDiv.textContent = formattedDate;

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  document.querySelectorAll('select, textarea.comment').forEach(el => {
    el.addEventListener('input', saveFormData);
  });

  // === –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ===
  const buildMessage = lang => {
    const translations = _getTranslations();
    let message = `üßæ <b>${lang === 'en' ? 'KITCHEN CLOSE' : '–ö–£–•–ù–Ø-–ó–ê–ö–†–´–¢–ò–ï'}</b>\n\n`;
    message += `üìÖ ${lang === 'en' ? 'Date' : '–î–∞—Ç–∞'}: ${formattedDate}\n`;

    const nameSelect = document.querySelector('select[name="chef"]');
    const selectedChef = nameSelect?.options[nameSelect.selectedIndex];
    let name = '‚Äî';
    if (selectedChef) {
      const chefKey = selectedChef.dataset.i18n;
      if (chefKey && translations[chefKey] && translations[chefKey][lang]) {
        name = translations[chefKey][lang];
      } else if (selectedChef.textContent && selectedChef.textContent.trim()) {
        name = selectedChef.textContent.trim();
      } else if (selectedChef.value && selectedChef.value !== '-') {
        name = selectedChef.value;
      }
    }
    message += `${lang === 'en' ? 'üë®‚Äçüç≥ Name' : 'üë®‚Äçüç≥ –ò–º—è'}: ${name}\n\n`;

    document.querySelectorAll('.checklist-section, .menu-section').forEach(section => {
      const sectionTitle = section.querySelector('.section-title');
      const titleKey = sectionTitle?.dataset.i18n;
      const title = (titleKey && translations[titleKey]?.[lang]) || sectionTitle?.textContent || '';

      let sectionContent = '';

      // —Å–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞/–ø–æ–ª—è
      const dishes = Array.from(section.querySelectorAll('.dish')).filter(dish => {
        const select = dish.querySelector('select.qty');
        return select && selectHasValue(select);
      });

      dishes.forEach((dish, idx) => {
        const label = dish.querySelector('label');
        const labelKey = label?.dataset.i18n;
        const labelText = (labelKey && translations[labelKey]?.[lang]) || (label?.textContent || '').trim() || '‚Äî';
        sectionContent += `${idx + 1}. ${labelText}\n`;
      });

      const commentField = section.querySelector('textarea.comment');
      if (commentField && commentField.value.trim()) {
        sectionContent += `üí¨ ${lang === 'en' ? 'Comment' : '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'}: ${commentField.value.trim()}\n`;
      }

      if (sectionContent.trim()) {
        // –µ—Å–ª–∏ –≤ —Å–µ–∫—Ü–∏–∏ –µ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ ‚Äî –ø–µ—á–∞—Ç–∞–µ–º –µ–≥–æ –±–µ–∑ —ç–º–æ–¥–∑–∏ –∏ –±–µ–∑ –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–≥–∞ (—á—Ç–æ–±—ã Telegram –æ—Ç–æ–±—Ä–∞–∂–∞–ª –∞–∫–∫—É—Ä–∞—Ç–Ω–æ)
        message += `${title}\n${sectionContent}\n`;
      }
    });

    return message;
  };

  // === –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–≤ Telegram) ===
  const button = document.getElementById('sendToTelegram');
  if (!button) {
    console.warn('–ö–Ω–æ–ø–∫–∞ #sendToTelegram –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    return;
  }

  button.addEventListener('click', async () => {
    console.log('–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (Kitchen Close)');
    const chat_id = '-1002393080811';
    const worker_url = 'https://shbb1.stassser.workers.dev/';

    const sendMessage = msg => fetch(worker_url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ chat_id, text: msg })
    }).then(res => res.json());

    const sendAllParts = async text => {
      let start = 0;
      while (start < text.length) {
        const chunk = text.slice(start, start + 4000);
        await sendMessage(chunk);
        start += 4000;
      }
    };

    try {
      const langs = window.sendLangs && Array.isArray(window.sendLangs) ? window.sendLangs : ['ru'];
      for (const l of langs) {
        const msg = buildMessage(l);
        await sendAllParts(msg);
      }

      alert('‚úÖ –û–¢–ü–†–ê–í–õ–ï–ù–û');
      localStorage.clear();
      document.querySelectorAll('select').forEach(s => s.value = '');
      document.querySelectorAll('textarea.comment').forEach(t => t.value = '');
    } catch (err) {
      alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: ' + (err?.message || err));
      console.error(err);
    }
  });

  console.log('Kitchen Close: init finished');
});
