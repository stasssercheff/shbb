// script.js ‚Äî Kitchen Close (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
// === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
let translations = {}; // —Å–ª–æ–≤–∞—Ä—å –¥–ª—è i18n (–±—É–¥–µ—Ç –ø–æ–¥—Ö–≤–∞—á–µ–Ω —á–µ—Ä–µ–∑ lang.json –∏–ª–∏ window.translations)

// === –ù–∞–≤–∏–≥–∞—Ü–∏—è ===
window.goHome = function () {
  window.location.href = "https://stasssercheff.github.io/shbb/";
};

window.goBack = function () {
  // —Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—É—é –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
  window.location.href = "../index.html";
};

// === –£—Ç–∏–ª–∏—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å –±—ã—Å—Ç—Ä—ã–º fallback'–æ–º ===
async function loadTranslations() {
  // –µ—Å–ª–∏ lang.js —É–∂–µ –ø–æ–ª–æ–∂–∏–ª —Å–ª–æ–≤–∞—Ä—å –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º
  if (window.translations && Object.keys(window.translations).length) {
    translations = window.translations;
    return;
  }

  // –ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π (—á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≥–ª—É–±–∏–Ω)
  const candidates = [
    "lang.json",
    "./lang.json",
    "../lang.json",
    "../../lang.json",
    "../../../lang.json",
    "../../../../lang.json"
  ];

  for (const p of candidates) {
    try {
      const resp = await fetch(p);
      if (!resp.ok) continue;
      const json = await resp.json();
      if (json && Object.keys(json).length) {
        translations = json;
        return;
      }
    } catch (e) {
      // silent - –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—É—Ç—å
    }
  }

  // –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç ‚Äî –æ—Å—Ç–∞–≤–∏–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç (–ø–µ—Ä–µ–≤–æ–¥—ã –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏)
  translations = {};
}

// === –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ ===
function switchLanguage(lang) {
  document.documentElement.lang = lang;
  localStorage.setItem("lang", lang);

  document.querySelectorAll("[data-i18n]").forEach(el => {
    const key = el.dataset.i18n;
    if (key && translations[key] && translations[key][lang]) {
      // placeholder –¥–ª—è input/textarea
      if ((el.tagName === "INPUT" || el.tagName === "TEXTAREA") && el.hasAttribute("placeholder")) {
        el.setAttribute("placeholder", translations[key][lang]);
      } else {
        el.textContent = translations[key][lang];
      }
    } else {
      // –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ—Ç ‚Äî –Ω–µ —Ç—Ä–æ–≥–∞–µ–º —Ç–µ–∫—Å—Ç (—á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª)
    }
  });

  // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ select (–µ—Å–ª–∏ —É –æ–ø—Ü–∏–∏ –µ—Å—Ç—å data-i18n)
  document.querySelectorAll("select").forEach(select => {
    Array.from(select.options).forEach(option => {
      const key = option.dataset.i18n;
      if (key && translations[key] && translations[key][lang]) {
        option.textContent = translations[key][lang];
      }
      // –¥–µ–ª–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ "–ø—É—Å—Ç—É—é" –æ–ø—Ü–∏—é ‚Äî –∑–Ω–∞–∫ ‚Äî –¥–ª—è –æ–ø—Ü–∏–π —Å value === ""
      if (option.value === "") option.textContent = "‚Äî";
    });
  });
}

// === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã ===
function saveFormData() {
  const data = {};
  document.querySelectorAll("select").forEach(select => {
    data[select.name || select.id] = select.value;
  });
  document.querySelectorAll("textarea.comment").forEach(textarea => {
    data[textarea.name || textarea.id] = textarea.value;
  });
  localStorage.setItem("formData", JSON.stringify(data));
}

function restoreFormData() {
  const saved = localStorage.getItem("formData");
  if (!saved) return;
  try {
    const data = JSON.parse(saved);
    document.querySelectorAll("select").forEach(select => {
      const key = select.name || select.id;
      if (data[key] !== undefined) select.value = data[key];
    });
    document.querySelectorAll("textarea.comment").forEach(textarea => {
      const key = textarea.name || textarea.id;
      if (data[key] !== undefined) textarea.value = data[key];
    });
  } catch (e) {
    console.warn("restoreFormData: JSON parse error", e);
  }
}

// === –ü–æ–º–æ—â–Ω–∏–∫: —Å—á–∏—Ç–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ select –∫–∞–∫ –ø—É—Å—Ç–æ–µ –µ—Å–ª–∏ value === "" –∏–ª–∏ "-" ===> —Ç—Ä–∞–∫—Ç—É–µ–º –∫–∞–∫ "–Ω–µ –≤—ã–±—Ä–∞–Ω"
function selectHasValue(select) {
  if (!select) return false;
  const val = select.value;
  return val !== "" && val !== "-" && val !== null && typeof val !== "undefined";
}

// === DOMContentLoaded ===
document.addEventListener("DOMContentLoaded", async () => {
  await loadTranslations();

  const lang = localStorage.getItem("lang") || "ru";

  // –ü—É—Å—Ç–∞—è –æ–ø—Ü–∏—è select.qty (–µ—Å–ª–∏ —É select –Ω–µ—Ç –æ–ø—Ü–∏–∏ —Å value === "")
  document.querySelectorAll("select.qty").forEach(select => {
    const hasEmpty = Array.from(select.options).some(opt => opt.value === "");
    if (!hasEmpty) {
      const emptyOption = document.createElement("option");
      emptyOption.value = "";
      emptyOption.dataset.i18n = "empty";
      emptyOption.textContent = "‚Äî";
      emptyOption.selected = true;
      select.insertBefore(emptyOption, select.firstChild);
    }
  });

  restoreFormData();
  switchLanguage(lang);

  // –î–∞—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç DD/MM)
  const today = new Date();
  const day = String(today.getDate()).padStart(2, "0");
  const month = String(today.getMonth() + 1).padStart(2, "0");
  const formattedDate = `${day}/${month}`;
  const dateDiv = document.getElementById("current-date");
  if (dateDiv) dateDiv.textContent = formattedDate;

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  document.querySelectorAll("select, textarea.comment").forEach(el => {
    el.addEventListener("input", saveFormData);
  });

  // === –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ===
  const buildMessage = lang => {
    let message = `üßæ <b>${lang === "en" ? "KICHEN CLOSE" : "–ö–£–•–ù–Ø-–ó–ê–ö–†–´–¢–ò–ï"}</b>\n\n`;
    message += `üìÖ ${lang === "en" ? "Date" : "–î–∞—Ç–∞"}: ${formattedDate}\n`;

    const nameSelect = document.querySelector('select[name="chef"]');
    const selectedChef = nameSelect?.options[nameSelect.selectedIndex];
    let name = "‚Äî";
    if (selectedChef) {
      const chefKey = selectedChef.dataset.i18n;
      if (chefKey && translations[chefKey] && translations[chefKey][lang]) {
        name = translations[chefKey][lang];
      } else if (selectedChef.textContent && selectedChef.textContent.trim()) {
        name = selectedChef.textContent.trim();
      } else if (selectedChef.value && selectedChef.value !== "-") {
        name = selectedChef.value;
      }
    }
    message += `${lang === "en" ? "üë®‚Äçüç≥ Name" : "üë®‚Äçüç≥ –ò–º—è"}: ${name}\n\n`;

    document.querySelectorAll(".checklist-section, .menu-section").forEach(section => {
      const sectionTitle = section.querySelector(".section-title");
      const titleKey = sectionTitle?.dataset.i18n;
      const title = (titleKey && translations[titleKey]?.[lang]) || sectionTitle?.textContent || "";

      let sectionContent = "";
      section.querySelectorAll(".dish").forEach(dish => {
        const select = dish.querySelector("select.qty");
        if (!select || !selectHasValue(select)) return;

        const label = dish.querySelector("label");
        const labelKey = label?.dataset.i18n;
        const labelText = (labelKey && translations[labelKey]?.[lang]) || (label?.textContent || "").trim() || "‚Äî";

        const selectedOption = select.options[select.selectedIndex];
        let value = "‚Äî";
        if (selectedOption) {
          const optionKey = selectedOption.dataset.i18n;
          if (optionKey && translations[optionKey] && translations[optionKey][lang]) {
            value = translations[optionKey][lang];
          } else if (selectedOption.textContent && selectedOption.textContent.trim()) {
            value = selectedOption.textContent.trim();
          } else if (selectedOption.value && selectedOption.value !== "-") {
            value = selectedOption.value;
          }
        }

        sectionContent += `‚Ä¢ ${labelText}: ${value}\n`;
      });

      const commentField = section.querySelector("textarea.comment");
      if (commentField && commentField.value.trim()) {
        sectionContent += `üí¨ ${lang === "en" ? "Comment" : "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"}: ${commentField.value.trim()}\n`;
      }

      if (sectionContent.trim()) {
        message += `üî∏ <b>${title}</b>\n${sectionContent}\n`;
      }
    });

    return message;
  };

  // === –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–≤ Telegram —Ç–æ–ª—å–∫–æ) ===
  const button = document.getElementById("sendToTelegram");
  if (!button) {
    console.warn("–ö–Ω–æ–ø–∫–∞ #sendToTelegram –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
    return;
  }

  button.addEventListener("click", async () => {
    console.log("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (Kitchen Close)");
    const chat_id = "-1002393080811";
    const worker_url = "https://shbb1.stassser.workers.dev/"; // —Ç–æ—Ç –∂–µ worker, —á—Ç–æ –∏ –≤ —Ä–∞–±–æ—á–µ–º —Ñ–∞–π–ª–µ

    const sendMessage = msg => fetch(worker_url, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ chat_id, text: msg })
    }).then(res => res.json());

    // –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤ –∏ —à–ª—ë–º —Ç–æ–ª—å–∫–æ –≤ Telegram
    const sendAllParts = async text => {
      let start = 0;
      while (start < text.length) {
        const chunk = text.slice(start, start + 4000);
        await sendMessage(chunk);
        start += 4000;
      }
    };

    try {
      // –∏—Å–ø–æ–ª—å–∑—É–µ–º —è–∑—ã–∫–∏ –∏–∑ sendConfig.js (window.sendLangs) –∏–ª–∏ fallback ["ru"]
      const langs = window.sendLangs && Array.isArray(window.sendLangs) ? window.sendLangs : ["ru"];
      for (const l of langs) {
        const msg = buildMessage(l);
        await sendAllParts(msg);
      }

      alert("‚úÖ –û–¢–ü–†–ê–í–õ–ï–ù–û");
      localStorage.clear();
      // –æ—á–∏—Å—Ç–∏–º —Ñ–æ—Ä–º—É
      document.querySelectorAll("select").forEach(s => s.value = "");
      document.querySelectorAll("textarea.comment").forEach(t => t.value = "");
    } catch (err) {
      alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: " + (err?.message || err));
      console.error(err);
    }
  });

  console.log("Kitchen Close: init finished");
});
