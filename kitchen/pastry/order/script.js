// === –ù–ê–í–ò–ì–ê–¶–ò–Ø ===
window.goHome = function () {
  location.href = "https://stasssercheff.github.io/shbb/";
};

window.goBack = function () {
  const path = window.location.pathname.split("/").filter(Boolean);
  if (path.length > 1) {
    path.pop();
    const target = "/" + path.join("/") + "/index.html";
    location.href = target;
  } else {
    location.href = "/shbb/index.html";
  }
};

// === –ù–ê–°–¢–†–û–ô–ö–ò –û–¢–ü–†–ê–í–ö–ò ===
const TELEGRAM_WORKER_URL = "https://shbb1.stassser.workers.dev/";
const TELEGRAM_CHAT_ID = "-1003076643701";
const WEB3FORMS_ACCESS_KEY = "14d92358-9b7a-4e16-b2a7-35e9ed71de43";
const WEB3FORMS_ENDPOINT = "https://api.web3forms.com/submit";

// === –Ø–ó–´–ö ===
async function loadLang() {
  try {
    const res = await fetch("https://stasssercheff.github.io/shbb/lang.json");
    if (!res.ok) throw new Error(`HTTP ${res.status}`);
    const dict = await res.json();
    window.langDict = dict;
    applyLanguage(localStorage.getItem("lang") || "ru");
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤–∞—Ä—è:", err);
  }
}

function applyLanguage(lang) {
  const dict = window.langDict?.[lang];
  document.querySelectorAll("[data-i18n]").forEach((el) => {
    const key = el.dataset.i18n;
    if (dict?.[key]) el.textContent = dict[key];
  });
  document.querySelectorAll(".section-title, .check-label").forEach((el) => {
    if (el.dataset[lang]) el.textContent = el.dataset[lang];
  });
}

function switchLanguage(lang) {
  document.documentElement.lang = lang;
  localStorage.setItem("lang", lang);
  applyLanguage(lang);
}

// === –î–ê–¢–ê / –í–†–ï–ú–Ø / –ê–í–¢–û–ò–î ===
function updateDateTime() {
  const now = new Date();
  const d = String(now.getDate()).padStart(2, "0");
  const m = String(now.getMonth() + 1).padStart(2, "0");
  const y = now.getFullYear();
  const h = String(now.getHours()).padStart(2, "0");
  const min = String(now.getMinutes()).padStart(2, "0");

  const dateEl = document.getElementById("current-date");
  const timeEl = document.getElementById("current-time");
  const idEl = document.getElementById("order-id");

  if (dateEl) dateEl.textContent = `${d}.${m}.${y}`;
  if (timeEl) timeEl.textContent = `${h}:${min}`;

  if (idEl) idEl.textContent = `${y}${m}${d}-${h}${min}`;
}

// === –°–û–•–†–ê–ù–ï–ù–ò–ï / –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï ===
function saveFormData() {
  const data = {};
  document.querySelectorAll("select, textarea.comment, input[type=text]").forEach((el) => {
    data[el.name || el.id] = el.value;
  });
  localStorage.setItem("formData", JSON.stringify(data));
}

function restoreFormData() {
  const saved = localStorage.getItem("formData");
  if (!saved) return;
  const data = JSON.parse(saved);
  document.querySelectorAll("select, textarea.comment, input[type=text]").forEach((el) => {
    if (data[el.name || el.id] !== undefined) el.value = data[el.name || el.id];
  });
}

// === –°–ë–û–†–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø ===
function buildMessage(lang) {
  const now = new Date();
  const d = String(now.getDate()).padStart(2, "0");
  const m = String(now.getMonth() + 1).padStart(2, "0");
  const h = String(now.getHours()).padStart(2, "0");
  const min = String(now.getMinutes()).padStart(2, "0");

  const dateStr = `${d}.${m}`;
  const timeStr = `${h}:${min}`;

  const dept = document.getElementById("department")?.value || "‚Äî";
  const position = document.getElementById("position")?.value || "‚Äî";
  const chef = document.getElementById("chef")?.value || "‚Äî";
  const orderId = document.getElementById("order-id")?.textContent || "‚Äî";

  let message = `üßæ <b>${lang === "en" ? "ORDER" : "–ó–ê–ö–ê–ó"}</b>\n\n`;
  message += `üÜî ID: ${orderId}\n`;
  message += `üìÖ ${lang === "en" ? "Date" : "–î–∞—Ç–∞"}: ${dateStr}\n`;
  message += `‚è∞ ${lang === "en" ? "Time" : "–í—Ä–µ–º—è"}: ${timeStr}\n`;
  message += `üè¢ ${lang === "en" ? "Department" : "–û—Ç–¥–µ–ª"}: ${dept}\n`;
  message += `üë®‚Äçüç≥ ${lang === "en" ? "Chef" : "–ü–æ–≤–∞—Ä"}: ${chef}\n`;
  message += `üéì ${lang === "en" ? "Position" : "–î–æ–ª–∂–Ω–æ—Å—Ç—å"}: ${position}\n\n`;

  document.querySelectorAll(".menu-section").forEach((section) => {
    const title = section.querySelector(".section-title")?.dataset[lang] || "";
    let sectionText = "";

    section.querySelectorAll(".dish").forEach((dish) => {
      const select = dish.querySelector("select.qty");
      if (!select?.value) return;
      const label = dish.querySelector(".check-label");
      const labelText = label?.dataset[lang] || label?.textContent || "";
      const selectedOpt = select.options[select.selectedIndex];
      const valueText = selectedOpt?.dataset[lang] || selectedOpt?.textContent;
      sectionText += `‚Ä¢ ${labelText}: ${valueText}\n`;
    });

    const comment = section.querySelector("textarea.comment");
    if (comment?.value.trim()) sectionText += `üí¨ ${comment.value.trim()}\n`;

    if (sectionText) message += `üî∏ <b>${title}</b>\n${sectionText}\n`;
  });

  return message;
}

// === –û–¢–ü–†–ê–í–ö–ê ===
async function sendToTelegram(text) {
  await fetch(TELEGRAM_WORKER_URL, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ chat_id: TELEGRAM_CHAT_ID, text }),
  });
}

async function sendToWeb3Forms(text) {
  await fetch(WEB3FORMS_ENDPOINT, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      access_key: WEB3FORMS_ACCESS_KEY,
      subject: "Order",
      from_name: "SHBB PASTRY",
      message: text,
    }),
  });
}

async function sendAll(text) {
  const chunk = 4000;
  for (let i = 0; i < text.length; i += chunk) {
    const part = text.slice(i, i + chunk);
    await sendToTelegram(part);
    await sendToWeb3Forms(part);
  }
}

function clearForm() {
  document.querySelectorAll("select, textarea.comment, input[type=text]").forEach((el) => (el.value = ""));
  localStorage.removeItem("formData");
}

// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
document.addEventListener("DOMContentLoaded", () => {
  updateDateTime();
  restoreFormData();
  loadLang();

  document.querySelectorAll("select, textarea.comment, input[type=text]").forEach((el) => {
    el.addEventListener("input", saveFormData);
  });

  document.querySelectorAll(".lang-btn").forEach((btn) => {
    btn.addEventListener("click", () => switchLanguage(btn.dataset.lang));
  });

  const profile = document.body.dataset.profile || "rest";
  const sendLangs = window.sendLangs || ["ru"];
  console.log(`‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ —è–∑—ã–∫–∞—Ö: ${sendLangs.join(", ")}`);

  document.getElementById("sendToTelegram")?.addEventListener("click", async () => {
    try {
      for (const lang of sendLangs) {
        const msg = buildMessage(lang);
        await sendAll(msg);
      }
      alert("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!");
      clearForm();
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", err);
      alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ");
    }
  });
});

