document.addEventListener('DOMContentLoaded', () => {
  console.log("‚úÖ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞");

  const chat_id = '-1002915693964';
  const worker_url = 'https://shbb1.stassser.workers.dev/';
  const button = document.getElementById('sendBtn');

  if (!button) {
    console.error("‚ùå –ö–Ω–æ–ø–∫–∞ #sendBtn –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ!");
    return;
  }
  console.log("‚úÖ –ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞, –Ω–∞–≤–µ—à–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫...");

// ‚úÖ –¢–µ–ø–µ—Ä—å —è–∑—ã–∫ –±–µ—Ä—ë–º –∏–∑ sendConfig.js (–ø–æ –ø—Ä–æ—Ñ–∏–ª—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
let sendLang = getSendLanguages(getCurrentProfile())[0];
console.log("üåç –¢–µ–∫—É—â–∏–π —è–∑—ã–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è:", getCurrentProfile(), "=>", sendLang);

  document.querySelectorAll('.lang-btn').forEach(btn => {
  btn.addEventListener('click', () => {
    const selectedLang = btn.dataset.lang;
    if (selectedLang) {
      sendLang = selectedLang;
      setSendLanguages(getCurrentProfile(), [sendLang]); // ‚úÖ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ sendProfiles
      console.log("üîÑ –Ø–∑—ã–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –æ–±–Ω–æ–≤–ª—ë–Ω:", sendLang);
    }
  });
});

  const buildMessage = () => {
    console.log("üõ† –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ...");
    const today = new Date();
    const date = `${String(today.getDate()).padStart(2, '0')}/${String(today.getMonth() + 1).padStart(2, '0')}`;

    let message = `üßæ <b>${
      sendLang === 'en' ? 'Waiter close 1st floor. Done from 6:' :
      sendLang === 'vi' ? 'Ph·ª•c v·ª• ƒë√≥ng (t·∫ßng 1) l√†m ƒë∆∞·ª£c trong 6' :
      '–û—Ñ–∏—Ü–∏–∞–Ω—Ç 1 —ç—Ç–∞–∂ –∑–∞–∫—Ä—ã—Ç–∏–µ. –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∏–∑ 6:'
    }</b>\n\n`;

    message += `üìÖ ${
      sendLang === 'en' ? 'Date' :
      sendLang === 'vi' ? 'Ng√†y' :
      '–î–∞—Ç–∞'
    }: ${date}\n`;

    const chefSelect = document.querySelector('select[name="chef"]');
    if (chefSelect) {
      const selectedOption = chefSelect.options[chefSelect.selectedIndex];
      message += `üë§ ${selectedOption.textContent.trim()}\n\n`;
    }

    const checklist = document.querySelectorAll('#checklist input[type="checkbox"]');
    let selectedItems = [];
    checklist.forEach((item, index) => {
      if (item.checked) {
        const label = item.closest('.checklist-item')?.querySelector('label');
        if (label) selectedItems.push(`${index + 1}. ${label.textContent.trim()}`);
      }
    });

    if (selectedItems.length === 0) {
      console.warn("‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ");
      return null;
    }

    message += selectedItems.join('\n');
    console.log("üì§ –ì–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", message);
    return message;
  };

  const sendMessage = async (msg) => {
    console.log("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ Worker...");
    const res = await fetch(worker_url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ chat_id, text: msg, parse_mode: "HTML" })
    });
    console.log("üì• –û—Ç–≤–µ—Ç –æ—Ç Worker:", res.status);
    const data = await res.json();
    console.log("üì• JSON:", data);
    return data;
  };

  button.addEventListener('click', async () => {
    console.log("üëÜ –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞");
    const msg = buildMessage();

    if (!msg) {
      alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—É–Ω–∫—Ç');
      return;
    }

    try {
      await sendMessage(msg);
      alert('‚úÖ –û–¢–ü–†–ê–í–õ–ï–ù–û');
      document.querySelectorAll('#checklist input[type="checkbox"]').forEach(cb => cb.checked = false);
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:", err);
      alert(`‚ùå –û—à–∏–±–∫–∞: ${err.message}`);
    }
  });
});
