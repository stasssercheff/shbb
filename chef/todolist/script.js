// === script.js ===
document.addEventListener('DOMContentLoaded', () => {
  const chat_id = '-1002393080811';
  const worker_url = 'https://shbb1.stassser.workers.dev/';
  const button = document.getElementById('sendBtn');

  if (!button) return;

  const headerDict = {
    title: { 
      ru: "–ß–µ–∫–ª–∏—Å—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", 
      en: "Checklist for today", 
      vi: "Danh s√°ch ki·ªÉm tra h√¥m nay" 
    },
    date: { 
      ru: "–î–∞—Ç–∞", 
      en: "Date", 
      vi: "Ng√†y" 
    },
    comment: { 
      ru: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", 
      en: "Comment", 
      vi: "Ghi ch√∫" 
    }
  };

  // –ù–∞ –≥–ª–∞–≤–Ω—É—é
  function goHome() {
      location.href = "http://stasssercheff.github.io/shbb/";
  }

  // –ù–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ (–æ–¥–Ω—É –ø–∞–ø–∫—É –≤–≤–µ—Ä—Ö)
  function goBack() {
      const currentPath = window.location.pathname;
      const parentPath = currentPath.substring(0, currentPath.lastIndexOf("/"));
      const upperPath = parentPath.substring(0, parentPath.lastIndexOf("/"));
      window.location.href = upperPath + "/index.html";
  }
    
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —è–∑—ã–∫–µ
  const buildMessage = (lang) => {
    const today = new Date();
    const date = `${String(today.getDate()).padStart(2,'0')}/${String(today.getMonth()+1).padStart(2,'0')}`;

    let message = `üßæ <b>${headerDict.title[lang] || headerDict.title.ru}</b>\n\n`;
    message += `üìÖ ${headerDict.date[lang] || headerDict.date.ru}: ${date}\n`;

    const chefSelect = document.querySelector('select[name="chef"]');
    if (chefSelect) {
      const selectedOption = chefSelect.options[chefSelect.selectedIndex];
      message += `üë§ ${selectedOption.textContent.trim()}\n\n`;
    }

    const checklist = document.querySelectorAll('#checklist input[type="checkbox"]');
    let selectedItems = [];
    checklist.forEach((item, index) => {
      if (item.checked) {
        const label = item.closest('.checklist-item')?.querySelector('label');
        if (label) {
          const key = label.dataset.i18n;
          const translated = key && translations && translations[key] && translations[key][lang]
            ? translations[key][lang]
            : label.textContent.trim();
          selectedItems.push(`${index+1}. ${translated}`);
        }
      }
    });

    if (selectedItems.length > 0) {
      message += selectedItems.join('\n');
    }

    // === üÜï –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –µ—Å–ª–∏ –µ—Å—Ç—å ===
    const commentField = document.querySelector('textarea.comment');
    if (commentField && commentField.value.trim() !== "") {
      message += `\n\nüí¨ ${headerDict.comment[lang] || headerDict.comment.ru}:\n${commentField.value.trim()}`;
    }

    return message;
  };

  const sendMessage = async (msg) => {
    const res = await fetch(worker_url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ chat_id, text: msg, parse_mode: "HTML" })
    });
    return res.json();
  };

  button.addEventListener('click', async () => {
    try {
      const currentProfile = getCurrentProfile();
      const sendLangs = getSendLanguages(currentProfile);
      console.log("üåç –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —è–∑—ã–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏:", sendLangs);

      if (!sendLangs.length) return alert('‚ö† –î–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤');

      let sentCount = 0;
      for (const lang of sendLangs) {
        const msg = buildMessage(lang);
        if (!msg) continue;
        await sendMessage(msg);
        sentCount++;
      }

      if (sentCount > 0) {
        alert(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${sentCount} (${sendLangs.join(", ").toUpperCase()})`);
        document.querySelectorAll('#checklist input[type="checkbox"]').forEach(cb => cb.checked = false);
        const commentField = document.querySelector('textarea.comment');
        if (commentField) commentField.value = ""; // üßπ —á–∏—Å—Ç–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
      } else {
        alert('‚ö† –ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏');
      }
    } catch (err) {
      console.error(err);
      alert(`‚ùå –û—à–∏–±–∫–∞: ${err.message}`);
    }
  });
});
